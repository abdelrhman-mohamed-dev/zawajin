import { I18nContext } from 'nestjs-i18n';
import { RegisterDto } from '../dto/register.dto';
import { LoginDto } from '../dto/login.dto';
import { VerifyOtpDto } from '../dto/verify-otp.dto';
import { ResendOtpDto } from '../dto/resend-otp.dto';
import { ForgetPasswordDto } from '../dto/forget-password.dto';
import { VerifyResetOtpDto } from '../dto/verify-reset-otp.dto';
import { ResetPasswordDto } from '../dto/reset-password.dto';
import { AuthService } from '../services/auth.service';
import { RegisterResponse, VerifyResponse, ResendResponse, LoginResponse, ForgetPasswordResponse, VerifyResetOtpResponse, ResetPasswordResponse } from '../interfaces/auth.interface';
import { UserRepository } from '../repositories/user.repository';
export declare class AuthController {
    private readonly authService;
    private readonly userRepository;
    private readonly logger;
    constructor(authService: AuthService, userRepository: UserRepository);
    register(registerDto: RegisterDto): Promise<RegisterResponse>;
    verifyEmail(verifyOtpDto: VerifyOtpDto): Promise<VerifyResponse>;
    resendOtp(resendOtpDto: ResendOtpDto): Promise<ResendResponse>;
    login(loginDto: LoginDto): Promise<LoginResponse>;
    forgetPassword(forgetPasswordDto: ForgetPasswordDto): Promise<ForgetPasswordResponse>;
    verifyResetOtp(verifyResetOtpDto: VerifyResetOtpDto): Promise<VerifyResetOtpResponse>;
    resetPassword(resetPasswordDto: ResetPasswordDto, req: any): Promise<ResetPasswordResponse>;
    getCurrentUser(req: any, i18n: I18nContext): Promise<{
        success: boolean;
        message: string;
        data: {
            profileCompletion: {
                percentage: number;
                completedFields: string[];
                missingFields: string[];
            };
            id: string;
            fullName: string;
            email: string;
            gender: string;
            phone: string;
            chartNumber: string;
            isEmailVerified: boolean;
            isPhoneVerified: boolean;
            isActive: boolean;
            dateOfBirth: Date;
            age: number;
            location: {
                city: string;
                country: string;
            };
            origin: string;
            maritalStatus: string;
            profession: string;
            weight: number;
            height: number;
            bodyColor: string;
            hairColor: string;
            hairType: string;
            eyeColor: string;
            houseAvailable: boolean;
            natureOfWork: string;
            bio: string;
            preferredMinWeight: number;
            preferredMaxWeight: number;
            preferredMinHeight: number;
            preferredMaxHeight: number;
            preferredBodyColors: string[];
            preferredHairColors: string[];
            preferredEyeColors: string[];
            partnerPreferencesBio: string;
            marriageType: string;
            acceptPolygamy: boolean;
            religiousPractice: string;
            sect: string;
            prayerLevel: string;
            role: string;
            permissions: string[];
            isBanned: boolean;
            banType: string;
            bannedAt: Date;
            bannedUntil: Date;
            bannedReason: string;
            bannedBy: string;
            isVerified: boolean;
            verifiedAt: Date;
            verifiedBy: string;
            isDeleted: boolean;
            deletedAt: Date;
            roleAssignedBy: string;
            roleAssignedAt: Date;
            createdAt: Date;
            updatedAt: Date;
        };
        timestamp: string;
    }>;
}
